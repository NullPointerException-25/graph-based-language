
parser code {:
    import java_cup.runtime.*;
    import java.util.*;

    class Nodo {
        String nombre;
        int valor;

        Nodo(String nombre, int valor) {
            this.nombre = nombre;
            this.valor = valor;
        }

        @Override
        public String toString() {
            return nombre + " = " + valor;
        }
    }

    class Arista {
        String origen;
        String destino;
        int peso;

        Arista(String origen, String destino, int peso) {
            this.origen = origen;
            this.destino = destino;
            this.peso = peso;
        }

        @Override
        public String toString() {
            return origen + " => " + destino + " : " + peso;
        }
    }

    Map<String, Nodo> nodos = new HashMap<>();
    List<Arista> aristas = new ArrayList<>();
    public static boolean error = false;
:}

// ===== CONFIGURACIÓN =====
init with {: System.out.println("Análisis iniciado..."); :}
scan with {: return lexer.yylex(); :}

// ===== TERMINALES =====
terminal DRAW, PATH, ARROW, COLON, SEMICOLON, EQUAL, COMMA, LPAREN, RPAREN;
terminal String ID;
terminal Integer NUM;

// ===== NO TERMINALES =====
non terminal program, instruction, instruction_list;
non terminal String node;
non terminal Integer value;

// ===== PUNTO DE ENTRADA =====
start with program;

// ===== GRAMÁTICA =====
program ::= instruction_list;

instruction_list ::= instruction SEMICOLON
                   | instruction SEMICOLON instruction_list;

instruction ::= node:E EQUAL value:V
                {:
                    if (nodos.containsKey(E)) {
                        System.out.println("Error: Nodo '" + E + "' ya existe.");
                    } else {
                        Nodo n = new Nodo(E, V);
                        nodos.put(E, n);
                        System.out.println("Nodo creado: " + n);
                    }
                :}

             | node:Origen ARROW node:Destino COLON value:Peso
                {:
                    if (!nodos.containsKey(Origen) || !nodos.containsKey(Destino)) {
                        System.out.println("Advertencia: Uno de los nodos no ha sido definido.");
                    }
                    Arista a = new Arista(Origen, Destino, Peso);
                    aristas.add(a);
                    System.out.println("Arista creada: " + a);
                :}

             | PATH LPAREN node:Inicio COMMA node:Fin RPAREN
                {:
                    System.out.println("Solicitud de camino de " + Inicio + " a " + Fin);
                    // Lógica para calcular camino más corto puede ir aquí
                :}

             | DRAW LPAREN node:N RPAREN
                {:
                    System.out.println("Dibujar desde nodo: " + N);
                    // Lógica de visualización o impresión del árbol/nodo puede ir aquí
                :}

             | error
                {:
                    System.err.println("¡Error de sintaxis detectado!");
                    parser.error = true;
                :}
;

node ::= ID {: RESULT = ID; :};
value ::= NUM {: RESULT = NUM; :};

